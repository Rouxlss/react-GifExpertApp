{"version":3,"sources":["helpers/getGifs.js","components/AddCategory.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","console","log","preventDefault","trim","length","cats","action","type","value","placeholder","onChange","target","require","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iMAAaA,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,uD,4GCuCLO,EAnCY,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAmB5C,OACI,sBAAMC,SAZW,SAACC,GAClBC,QAAQC,IAAI,gBACZF,EAAEG,iBAECN,EAAWO,OAAOC,OAAS,IAC1BV,GAAc,SAAAW,GAAI,OAAGT,GAAH,mBAAkBS,OACpCR,EAAc,MAMYS,OAAO,GAArC,SACI,uBACIC,KAAK,OACLC,MAAOZ,EACPa,YAAY,cACZC,SAtBc,SAACX,GACvB,IAAIS,EAAQT,EAAEY,OAAOH,MACrBX,EAAcW,S,QCRd/B,EAAYmC,EAAQ,IAApBnC,QCCKoC,EAAc,SAAC,GAAmB,EAAlBxB,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAClC,OACI,sBAAKkC,UAAU,+DAAf,UACI,qBAAKC,IAAKnC,EAAKoC,IAAK1B,IACpB,4BAAIA,QCwBD2B,EA1BQ,SAAC,GAAgB,IAAfvC,EAAc,EAAdA,SAAc,EFDX,SAACA,GAAc,IAAD,EAEZiB,mBAAS,CAC/BV,KAAK,GACLiC,SAAQ,IAJ0B,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBtC,OAbAC,qBAAU,WAEN5C,EAAQC,GAAU4C,MACd,SAAAC,GACIH,EAAS,CACLnC,KAAMsC,EACNL,SAAQ,SAKrB,CAACxC,IAEGyC,EEjBwBK,CAAa9C,GAAhCa,EAFuB,EAE5BN,KAAaiC,EAFe,EAEfA,QAGpB,OACI,qCAEKA,GAAW,mBAAGJ,UAAU,oCAAb,wBAEZ,oBAAIA,UAAU,oCAAd,SAAmDpC,IAEnD,qBAAKoC,UAAU,YAAf,SAEIvB,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aCSlBoC,EAzBM,WAAO,IAAD,EAEa9B,mBAAS,IAFtB,mBAEhB+B,EAFgB,KAEJhC,EAFI,KAIvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQgC,EAAWvC,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCbjCiD,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.38f664d1.chunk.js","sourcesContent":["export const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=uS1E2u72QzRTT0EfghKFRXNFmpDj4VJa`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }    \r\n    })\r\n\r\n    return gifs;\r\n    \r\n}\r\n","import React from 'react'\r\nimport {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        let value = e.target.value;\r\n        setInputValue(value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        console.log('Submit hecho');\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2) {\r\n            setCategories(cats=>[inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} action=\"\">\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                placeholder='Buscar gifs'\r\n                onChange={ handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","import {useState, useEffect} from 'react';\r\nconst { getGifs } = require(\"../helpers/getGifs\");\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(() => {\r\n        \r\n        getGifs(category).then(\r\n            imgs=> {              \r\n                setstate({\r\n                    data: imgs,\r\n                    loading:false\r\n                })\r\n            }\r\n        )\r\n        \r\n    }, [category]);\r\n\r\n    return state;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown animate__delay-2s\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    \r\n    return (\r\n        <>\r\n        \r\n            {loading && <p className=\"animate__animated animate__fadeIn\" >Loading...</p>}\r\n\r\n            <h2 className=\"animate__animated animate__fadeIn\">{category}</h2>\r\n\r\n            <div className=\"card-grid\">\r\n            {\r\n                images.map(img => (\r\n                    <GifGridItem \r\n                        key={img.id}\r\n                        {...img}\r\n                    />\r\n                ))\r\n            }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;","import {useState} from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([]);  \r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => ( \r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                } \r\n            </ol>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}